This is tags.info, produced by makeinfo version 4.11 from
./semantic/doc/tags.texi.

The end result of a  parser is a list of tags per each buffer.  This
chapter discusses the tag data structure and the API provided by  to
query, process, and modify tags.

   The tags list for a buffer can be obtained by calling
`semantic-fetch-tags' which returns a parse tree of tags that represent
the program structure.


File: tags.info,  Node: Top,  Up: (dir)

Top
***

* Menu:

* Tag Basics::
* Tag Query::
* Tag Hooks::
* Tag Overlay::
* Misc Tag Functions::
* Tag Internals::


File: tags.info,  Node: Tag Basics,  Next: Tag Query,  Prev: Top,  Up: Top

Tag Basics
==========

Currently each tag is a list with up to five elements:
     (NAME CLASS ATTRIBUTES PROPERTIES OVERLAY)

   Application developers should not rely on this list structure.
Instead they should rely on the provided API documented in this chapter.
The list structure is explained here primarily to help those reading
the  source code.

   * NAME is a required component for all tags, i.e., every tag must
     have this component. It is also guaranteed to be a string.  This
     string represents the name of the tag, usually a named definition
     which the language will use elsewhere as a reference to the
     syntactic element found.

   * CLASS is the other required component for all tags.  It is a
     symbol representing the class of the tag.  Valid CLASSes can be
     anything, as long is it is an Emacs Lisp symbol.  However
     following are some of the well-known symbols: `type', `function',
     `variable', `include', `package', `code'.

   * ATTRIBUTES is a property list that keep information related to the
     tag parsed from the buffer.

     The symbol names in the property list can be anything, though
     there is a useful set of predefined attributes.  It is best to use
     the API functions to access the well-known properties.  *note Tag
     Query::.

   * PROPERTIES is generated by the semantic parser harness, and need
     not be provided by a language author.

     Properties are used to store transient data on a tag unrelated to
     the source of the original tag, such as hook functions, dynamic
     overlays, or other data needed by programs.

     The semantic incremental parser will attempt to maintain properties
     when reparsing the source of a tag.

   * OVERLAY represents positional information for this tag.  It is
     automatically generated by the semantic parser harness, and need
     not be provided by the language author.  Depending on the overlay
     in a program can be dangerous because sometimes the overlay is
     replaced with an integer pair
          [ START END ]
     when the buffer the tag belongs to is not in memory.  This happens
     when a user has activated the Semantic Database  *note
     (lang-support-guide)semanticdb::.

 -- Function: semantic-tag-name tag
     Return the name of TAG.  For functions, variables, classes,
     typedefs, etc., this is the identifier that is being defined.  For
     tags without an obvious associated name, this may be the statement
     type, e.g., this may return `print' for python's print statement.
     semantic-token-name,semantic-tag-name

 -- Function: semantic-tag-class tag
     Return the class of TAG.  That is, the symbol `'variable',
     `'function', `'type', or other.  There is no limit to the symbols
     that may represent the class of a tag.  Each parser generates tags
     with classes defined by it.

     For functional languages, typical tag classes are:

    `type'
          Data types, named map for a memory block.

    `function'
          A function or method, or named execution location.

    `variable'
          A variable, or named storage for data.

    `include'
          Statement that represents a file from which more tags can be
          found.

    `package'
          Statement that declares this file's package name.

    `code'
          Code that has not name or binding to any other symbol, such
          as in a script.

     semantic-token-token,semantic-tag-class

   Several functions that deal with ATTRIBUTES component are given in
*note Tag Attributes Internals: Tag Attributes Internals.  However
functions listed in *note Tag Query: Tag Query.  should provide most
needs of the application developer.

   Similarly functions that deal with PROPERTIES component are given in
*note Tag Properties Internals: Tag Properties Internals.  The
application developer should not need to use any of these.

   Finally *note Tag Overlay: Tag Overlay. lists functions dealing with
the OVERLAY component.


File: tags.info,  Node: Tag Query,  Next: Tag Hooks,  Prev: Tag Basics,  Up: Top

Tag Query
=========

This section lists functions that answers simple questions regarding a
given tag.

Tag Predicates
--------------

 -- Function: semantic-tag-p tag
     Return non-`nil' if TAG is most likely a semantic tag.
     semantic-token-p,semantic-tag-p

 -- Function: semantic-equivalent-tag-p tag1 tag2
     Compare TAG1 and TAG2 and return non-`nil' if they are equivalent.
     Use "equal" on elements the name, class, and position.  Use this
     function if tags are being copied and regrouped to test for if two
     tags represent the same thing, but may be constructed of different
     cons cells.  semantic-equivalent-tokens-p,semantic-equivalent-tag-p

 -- Function: semantic-tag-similar-p tag1 tag2
     Test to see if TAG1 and TAG2 are similar.  Two tags are similar if
     their name, datatype, and various attributes are the same.

     Similar tags that have sub-tags such as arg lists or type members,
     are similar w/out checking the sub-list of tags.

 -- Function: semantic-tag-of-class-p tag class
     Return non-`nil' if class of TAG is CLASS.

 -- Function: semantic-tag-faux-p tag
     Return non-`nil' if TAG is a FAUX tag.  FAUX tags are created to
     represent a construct that is not known to exist in the code.

     Example: When the class browser sees methods to a class, but
     cannot find the class, it will create a faux tag to represent the
     class to store those methods.

 -- Function: semantic-tag-type-compound-p tag
     Return non-`nil' the type of TAG is compound.  Compound implies a
     structure or similar data type.  Returns the list of tag members
     if it is compound.

Documentation
-------------

 -- Function: semantic-tag-docstring tag &optional buffer
     Return the documentation of TAG.  That is the value defined by the
     `:documentation' attribute.  Optional argument BUFFER indicates
     where to get the text from.  If not provided, then only the
     POSITION can be provided.

     If you want to get documentation for languages that do not store
     the documentation string in the tag itself, use
     "semantic-documentation-for-tag" instead.
     semantic-token-docstring,semantic-tag-docstring

Common Flags
------------

 -- Function: semantic-tag-variable-constant-p tag
     Return non-`nil' if the variable that TAG describes is a constant.
     That is the value of the attribute `:constant-flag'.
     semantic-token-variable-const,semantic-tag-variable-constant-p

 -- Function: semantic-tag-function-destructor-p tag
     Return non-`nil' if TAG describes a destructor function.  That is
     the value of the `:destructor-flag' attribute.
     semantic-token-function-destructor,semantic-tag-function-destructor-p

 -- Function: semantic-tag-function-throws tag
     Return the exceptions the function that TAG describes can throw.
     That is the value of the `:throws' attribute.
     semantic-token-function-throws,semantic-tag-function-throws

 -- Function: semantic-tag-modifiers tag
     Return the value of the `:typemodifiers' attribute of TAG.
     semantic-token-type-modifiers,semantic-tag-modifiers
     semantic-token-variable-modifiers,semantic-tag-modifiers
     semantic-token-function-modifiers,semantic-tag-modifiers

Functions
---------

 -- Function: semantic-tag-function-arguments tag
     Return the arguments of the function that TAG describes.  That is
     the value of the `:arguments' attribute.
     semantic-token-function-args,semantic-tag-function-arguments

Variables
---------

 -- Function: semantic-tag-variable-default tag
     Return the default value of the variable that TAG describes.  That
     is the value of the attribute `:default-value'.
     semantic-token-variable-default,semantic-tag-variable-default

Data Types
----------

 -- Function: semantic-tag-type tag
     Return the value of the `:type' attribute of TAG.  For a function
     it would be the data type of the return value.  For a variable, it
     is the storage type of that variable.  For a data type, the type
     is the style of datatype, such as struct or union.
     semantic-token-type,semantic-tag-type

 -- Function: semantic-tag-of-type-p tag type
     Compare TAG's type against TYPE.  Non `nil' if equivalent.  TYPE
     can be a string, or a tag of class `'type'.  This can be complex
     since some tags might have a `:type' that is a tag, while other
     tags might just have a string.  This function will also be return
     true of TAG's type is compared directly to the declaration of a
     data type.

Inheritance and Hierarchy
-------------------------

 -- Function: semantic-tag-named-parent tag
     Return the parent of TAG.  That is the value of the `:parent'
     attribute.  If a definition can occur outside an actual parent
     structure, but refers to that parent by name, then the `:parent'
     attribute should be used.

 -- Function: semantic-tag-function-parent tag
     Return the parent of the function that TAG describes.  That is the
     value of the `:parent' attribute.  A function has a parent if it
     is a method of a class, and if the function does not appear in
     body of its parent class.
     semantic-token-function-parent,semantic-tag-function-parent

 -- Function: semantic-tag-type-superclasses tag
     Return the list of superclasses of the type that TAG describes.
     semantic-token-type-parent-superclass,semantic-tag-type-superclasses
     semantic-token-type-parent,semantic-tag-type-superclasses

 -- Function: semantic-tag-type-interfaces tag
     Return the list of interfaces of the type that TAG describes.
     semantic-token-type-parent-implement,semantic-tag-type-interfaces
     semantic-token-type-parent,semantic-tag-type-interfaces

 -- Function: semantic-tag-type-members tag
     Return the members of the type that TAG describes.  That is the
     value of the `:members' attribute.
     semantic-token-type-parts,semantic-tag-type-members

Includes
--------

 -- Function: semantic-tag-include-system-p tag
     Return non-`nil' if the include that TAG describes is a system
     include.  That is the value of the attribute `:system-flag'.
     semantic-token-include-system,semantic-tag-include-system-p

 -- Function: semantic-tag-include-filename tag
     Return a filename representation of TAG.  The default action is to
     return the "semantic-tag-name".  Some languages do not use full
     filenames in their include statements.  Override this method to
     translate the code represenation into a filename.  (A relative
     filename if necessary.)

     See "semantic-dependency-tag-file" to expand an include tag to a
     full file name.  This function can be overloaded (see
     "define-mode-local-override" for details).

Code
----

 -- Function: semantic-tag-code-detail tag
     Return detail information from code that TAG describes.  That is
     the value of the attribute `:detail'.

Tag Children
------------

 -- Function: semantic-tag-components tag
     Return a list of components for TAG.  A Component is a part of TAG
     which itself may be a TAG.  Examples include the elements of a
     structure in a tag of class `type, or the list of arguments to a
     tag of class `'function'.  This function can be overloaded (see
     "define-mode-local-override" for details).

 -- Function: semantic-tag-components-default tag
     Return a list of components for TAG.  Perform the described task
     in "semantic-tag-components".

 -- Function: semantic-tag-children-compatibility tag &optional
          positiononly
     Return children of TAG.  If POSITIONONLY is `nil', use
     "semantic-tag-components".  If POSITIONONLY is non-`nil', use
     "semantic-tag-components-with-overlays".  DO NOT use this fcn in
     new code.  Use one of the above instead.
     semantic-nonterminal-children,semantic-tag-children-compatibility


File: tags.info,  Node: Tag Overlay,  Next: Misc Tag Functions,  Prev: Tag Hooks,  Up: Top

Tag Overlay
===========

The functions in this answer questions regarding the overly such as the
buffer in which the tags is located, the start and/or end position of
the tag, and the overlay itself which spans the tags.

 -- Function: semantic-tag-start tag
     Return the start location of TAG.
     semantic-token-start,semantic-tag-start

 -- Function: semantic-tag-end tag
     Return the end location of TAG.
     semantic-token-end,semantic-tag-end

 -- Function: semantic-tag-bounds tag
     Return the location (START END) of data TAG describes.
     semantic-token-extent,semantic-tag-bounds

 -- Function: semantic-tag-in-buffer-p tag
     Return the buffer TAG resides in IFF tag is already in a buffer.
     If a tag is not in a buffer, return `nil'.

 -- Function: semantic-tag-buffer tag
     Return the buffer TAG resides in.  If TAG has an originating file,
     read that file into a (maybe new) buffer, and return it.  Return
     `nil' if there is no buffer for this tag.
     semantic-token-buffer,semantic-tag-buffer

 -- Function: semantic-tag-file-name tag
     Return the name of the file from which TAG originated.  Return
     `nil' if that information can't be obtained.  If TAG is from a
     loaded buffer, then that buffer's filename is used.  If TAG is
     unlinked, but has a `:filename' property, then that is used.

 -- Function: semantic-tag-overlay tag
     Return the OVERLAY part of TAG.  That is, an overlay or an
     unloaded buffer representation.  This function can also return an
     array of the form [ START END ].  This occurs for tags that are
     not currently linked into a buffer.
     semantic-token-overlay,semantic-tag-overlay

 -- Function: semantic-tag-with-position-p tag
     Return non-`nil' if TAG has positional information.
     semantic-token-with-position-p,semantic-tag-with-position-p

 -- Function: semantic-tag-components-with-overlays tag
     Return the list of top level components belonging to TAG.
     Children are any sub-tags which contain overlays.

     Default behavior is to get "semantic-tag-components" in addition
     to the components of an anonymous types (if applicable.)

    *Language authors, please note:*
          If a mode defines a language tag that has tags in it with
          overlays you should still return them with this function.
          Ignoring this step will prevent several features from working
          correctly.  This function can be overloaded (see
          "define-mode-local-override" for details).

 -- Function: semantic-tag-components-with-overlays-default tag
     Return the list of top level components belonging to TAG.
     Children are any sub-tags which contain overlays.  The default
     action collects regular components of TAG, in addition to any
     components beloning to an anonymous type.


File: tags.info,  Node: Tag Hooks,  Next: Tag Overlay,  Prev: Tag Query,  Up: Top

Tag Hooks
=========

Individual tags can have hooks associated with them.  Hooks are saved
as properties, but can cause specific tags to have special behaviors
after a hook is added.

   You can manipulate tag hooks with these functions:

 -- Function: semantic-tag-add-hook tag hook function &optional append
     Onto TAG, add to the value of HOOK the function FUNCTION.
     FUNCTION is added (if necessary) at the beginning of the hook list
     unless the optional argument APPEND is non-`nil', in which case
     FUNCTION is added at the end.  HOOK should be a symbol, and
     FUNCTION may be any valid function.  See also the function
     "add-hook".

 -- Function: semantic-tag-remove-hook tag hook function
     Onto TAG, remove from the value of HOOK the function FUNCTION.
     HOOK should be a symbol, and FUNCTION may be any valid function.
     If FUNCTION isn't the value of HOOK, or, if FUNCTION doesn't
     appear in the list of hooks to run in HOOK, then nothing is done.
     See also the function "remove-hook".

   For a developer, if you have an application for which you want to
support a special kind of hook on a per tag basis, you can use this to
run those hooks.

 -- Function: semantic-tag-run-hooks tag hook &rest args
     Run for TAG all expressions saved on the property HOOK.  Each hook
     expression must take at least one argument, the TAG.  For any
     given situation, additional ARGS may be passed.

   Semantic supports two TAG specific hooks at this time:

`link-hook'
     This hook is run whenever a tag is linked into a buffer.  This
     occurs just after parsing, and whenever a tag is loaded into
     memory.  This hook also executes after a database save, when all
     tags are first unlinked from the current buffer before the save.

`unlink-hook'
     This hook is run whenever a tag is unlinked from a buffer.  This
     occurs during a database save, or when a tag is modified by the
     incremental parser.

`unlink-copy-hook'
     This hook is run whenever a tag is copied.  This occurs in the
     function `semantic-tag-copy'.  Use this hook to remove properties
     from the tag that link it to a buffer, as this tag should no longer
     have direct buffer links.


File: tags.info,  Node: Misc Tag Functions,  Next: Tag Internals,  Prev: Tag Overlay,  Up: Top

Misc Tag Functions
==================

 -- Command: semantic-narrow-to-tag &optional tag
     Narrow to the region specified by the bounds of TAG.  See
     "semantic-tag-bounds".
     semantic-narrow-to-token,semantic-narrow-to-tag

 -- Function: semantic-with-buffer-narrowed-to-current-tag &rest body
     Execute BODY with the buffer narrowed to the current tag.
     semantic-with-buffer-narrowed-to-current-token,semantic-with-buffer-narrowed-to-current-tag

 -- Function: semantic-with-buffer-narrowed-to-tag tag &rest body
